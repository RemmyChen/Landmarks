<!DOCTYPE html>

<html>
	<head>
		<title>Historic Landmarks</title> 
		<meta name="viewport" content="initial-scale=1.0, user-scalable=no" />
		<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAll4uxqg9VdCeudR5x69otaDcBjYvDbQ8"></script>
		<link rel="stylesheet" href="style.css" />
		<script>
			// my geolocation and login
			var myLat = 0;
			var myLng = 0;
			var me = new google.maps.LatLng(myLat, myLng);
			var mylogin = "7UzqUwa9";

			// map characteristics
			var myOptions = {
				zoom: 13, // the larger the zoom number, the bigger the zoom
				center: me,
				mapTypeId: google.maps.MapTypeId.ROADMAP
			};
			var map;
			var marker;
			var infowindow = new google.maps.InfoWindow();
			
			// list of person objects, list of landmark objects, list of distances of landmarks from me
			var peopleList = [];
			var landmarkList = [];
			var distanceList = [];
			var d = 0;
			var shortestdist = 1; 
			var iteration = 0;

			// initiate js functions after html is loaded
			function init()
			{
				map = new google.maps.Map(document.getElementById("map_canvas"), myOptions);
				getMyLocation();
			}
			
			// retrieves my location
			function getMyLocation() {
				if (navigator.geolocation) { // if navigator.geolocation object is supported by browser
					navigator.geolocation.getCurrentPosition(function(position) {
						myLat = position.coords.latitude;
						myLng = position.coords.longitude;
						retrieveData();
					});
				}
				else {
					alert("Geolocation is not supported by your web browser.");
				}
			}

			// posts my location & retrieves landmarks and peers' locations via heroku .json
			function retrieveData() { 
				request = new XMLHttpRequest();
				request.open("POST", "https://lit-brushlands-98638.herokuapp.com/sendLocation", true);
				request.setRequestHeader("Content-type", "application/x-www-form-urlencoded");

				request.onreadystatechange = function() {
					if (request.readyState == 4 && request.status == 200) {
						rawData = request.responseText;
						messages = JSON.parse(rawData);

						// create constructor for Person Objects
						function Person(personLat, personLng, personLogin) {
							this.personLat = personLat;
							this.personLng = personLng;
							this.personLogin = personLogin;
						}

						// create a List of Person Objects for others
						for (count = 0; count < messages.people.length; count++) {
							peopleList[count] = new Person(messages.people[count].lat, messages.people[count].lng, messages.people[count].login);
						}
						
						// create constructor for Landmark Objects
						function Landmark(landmarkLat, landmarkLng, landmarkName, landmarkDets) {
							this.landmarkLat = landmarkLat;
							this.landmarkLng = landmarkLng;
							this.landmarkName = landmarkName;
							this.landmarkDets = landmarkDets;
						}
						
						// create a List of Landmark Objects for landmarks
						for (count = 0; count < messages.landmarks.length; count++) {
							landmarkList[count] = new Landmark(messages.landmarks[count].geometry.coordinates[1], messages.landmarks[count].geometry.coordinates[0], messages.landmarks[count].properties.Location_Name, messages.landmarks[count].properties.Details);
						} 

						renderMap();
					}
				}
				request.send("login=" + mylogin + "&lat=" + myLat + "&lng=" + myLng);
			}

			// displays google map with markers for peers, landmarks and self
			function renderMap()
			{
				me = new google.maps.LatLng(myLat, myLng);
				
				// update map and go there...
				map.panTo(me);
				
				// add customized marker icons
				var iconBase = 'https://github.com/RemmyChen/Landmarks/tree/master/views/pages/';
		        var icons = {
		          self: {icon: iconBase + 'me.png'},
		          others: {icon: iconBase + 'other.png'},
		          landmarks: {icon: iconBase + 'landmark.png'}
		        };

				// loop through people list and place a marker for each person
		        for (var i = 0; i < peopleList.length; i++) {

		        	calcDistance(peopleList[i].personLat, peopleList[i].personLng);
					
		          	var personlatLng = new google.maps.LatLng(peopleList[i].personLat, peopleList[i].personLng);
			        console.log("1");
			        console.log(personLatLng);
			        marker = new google.maps.Marker({
			            position: personlatLng,
			            icon: icons['others'].icon,
			            content: "<p>" + peopleList[i].personLogin + "</p><p>Distance Away: " + d.toFixed(2) + " miles</p>"
			        });
		        	marker.setMap(map);

		        	// open info window on click of marker
					google.maps.event.addListener(marker, 'click', function() {
						infowindow.setContent(this.content);
						infowindow.open(map, this);
					});
		    	}

		        // loop through landmark list and place a marker for each landmark
		        for (var j = 0; j < landmarkList.length; j++) {
		          	calcDistance(landmarkList[j].landmarkLat, landmarkList[j].landmarkLng);

		          	distanceList[j] = d;

		          	var landmarklatLng = new google.maps.LatLng(landmarkList[j].landmarkLat, landmarkList[j].landmarkLng);
			        
			        marker = new google.maps.Marker({
			            position: landmarklatLng,
			            icon: icons['landmarks'].icon,
			            content: "<p>" + landmarkList[j].landmarkName + "</p><p>" + landmarkList[j].landmarkDets + "</p><p>Distance Away: " + d.toFixed(2) + " miles</p>"
			        });
		        	marker.setMap(map);

					// open info window on click of marker
					google.maps.event.addListener(marker, 'click', function() {
						infowindow.setContent(this.content);
						infowindow.open(map, this);
					});
				}

				// loop through distance list to find closest landmark
				for (var k = 0; k < distanceList.length; k++) {
					if (shortestdist > distanceList[k]) {
		          		shortestdist = distanceList[k];
		          		iteration = k;

			        var closestlandmarklatLng = new google.maps.LatLng(landmarkList[k].landmarkLat, landmarkList[k].landmarkLng);

					// draw the polyline route from me to closest landmark
					var route = new google.maps.Polyline({
						path: [me, closestlandmarklatLng],
						map: map
					});	
		          	}
				}

				// create a marker for self
				marker = new google.maps.Marker({
					position: me,
					icon: icons['self'].icon,
					content: "<p>" + mylogin + "</p><p>Closest Landmark is: " + landmarkList[iteration].landmarkName + "</p><p>Distance Away: " + shortestdist.toFixed(2) + " miles</p>"
				});
				marker.setMap(map);

				// open info window on click of marker
				google.maps.event.addListener(marker, 'click', function() {
					infowindow.setContent(this.content);
					infowindow.open(map, this);
				});	
			}

			// find distance between 2 locations
			function calcDistance(someLat, someLng)
			{
					Number.prototype.toRad = function() {
					   return this * Math.PI / 180;
					}

					var lat2 = someLat; 
					var lon2 = someLng; 
					var lat1 = myLat; 
					var lon1 = myLng; 

					var R = 6371; // km 
					var x1 = lat2-lat1;
					var dLat = x1.toRad();  
					var x2 = lon2-lon1;
					var dLon = x2.toRad();  
					var a = Math.sin(dLat/2) * Math.sin(dLat/2) + 
					                Math.cos(lat1.toRad()) * Math.cos(lat2 * Math.PI / 180) * 
					                Math.sin(dLon/2) * Math.sin(dLon/2);  
					var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); 
					d = (R * c) / 1.609344; // division converts km to miles
			}

		</script>
	</head>
	
	<body onload="init()">
		<div id="map_canvas"></div>
	</body>
</html>
